node{
    def AppName = "config-server"
    def remote = [:]
    remote.name = "dev-server"
    remote.allowAnyHosts = true
  
    remote.user = "dev-admin"
    remote.password = "password"
  
    def configPassword = "password"
    def configDBUser = "password"
    def configDBPassword = "password"
    def CONFIG_DB_URL = "url"

  stage("Checkout SCM"){
    checkout scm  
  }
  
  stage("Mvn Package"){
    def mvnHome = tool name: "maven", type: "maven"
    def mvnCMD = "${mvnHome}/bin/mvn"
    sh "${mvnCMD} clean -DskipTests=true package"
  }
    
  stage("Build & Tag Docker Image"){
   sh "echo ${env.BRANCH_NAME}" 
   sh "docker build -t ${AppName}-${env.BRANCH_NAME}:${BUILD_NUMBER} ."
   sh "docker tag ${AppName}-${env.BRANCH_NAME}:${BUILD_NUMBER} ${DockerRegistryURL}/development-setup/${AppName}-${env.BRANCH_NAME}:${BUILD_NUMBER}"
  }
    
    stage("Push Docker Image"){
        withCredentials([string(credentialsId: "docker-reg-pwd", variable: "DockerRegPWD")]) {
            sh "docker login ${DockerRegistryURL} -u maintainer -p ${DockerRegPWD}"
        }
        sh "docker push ${DockerRegistryURL}/development-setup/${AppName}-${env.BRANCH_NAME}:${BUILD_NUMBER}"
    }
    
    stage("Deploy to Dev Server"){
      sh "echo Starting Deployment"
      
     if("development" == "${env.BRANCH_NAME}") { 
        sh "echo Deploying on DEV Server"
        withCredentials([usernamePassword(credentialsId: "dev-server-ssh", passwordVariable: "password", usernameVariable: "userName")]) {
          remote.user = userName
          remote.password = password
          remote.name = "dev-server"
          remote.host = "${env.DevServerIP}"
          CONFIG_DB_URL = "jdbc:mysql://${DevConfigDBHostPort}/config_server_db?createDatabaseIfNotExist=true";
          sh "echo ${CONFIG_DB_URL}"
           withCredentials([string(credentialsId: "docker-reg-pwd", variable: "DockerRegPWD")]) {
            sshCommand remote: remote, command: "docker login ${DockerRegistryURL} -u maintainer -p ${DockerRegPWD}"
            sshCommand remote: remote, command: "docker stop ${AppName} || true && docker rm ${AppName} || true"
            sshCommand remote: remote, command: "docker pull ${DockerRegistryURL}/development-setup/${AppName}-${env.BRANCH_NAME}:${BUILD_NUMBER}"
            withCredentials([usernamePassword(credentialsId: "Dev-Config-User", passwordVariable: "password", usernameVariable: "userName")]) {
              configPassword = password
              withCredentials([usernamePassword(credentialsId: "dev-config-server-db", passwordVariable: "password", usernameVariable: "userName")]) {
                configDBPassword = password
                configDBUser = userName
                sshCommand remote: remote, command: "docker run --restart=always -d  --net cropdata-network --name ${AppName} -p 8763:8080 -e EUREKA_URI=${env.iEurekaUri} -e CONFIG_DB_URL=${CONFIG_DB_URL} -e config.dbUser=${configDBUser} -e config.dbPassword=${configDBPassword} -e config.password=${configPassword} -v /var/log/${AppName}/:/var/log/${AppName}/ -v /home/${remote.user}/docker_data/development-setup/${AppName}/:/home/ -v /etc/timezone:/etc/timezone:ro ${DockerRegistryURL}/development-setup/${AppName}-${env.BRANCH_NAME}:${BUILD_NUMBER}"
              }//with ConfigDB
            }//with Config-User
         }//with docker-reg-pwd
        }//with dev-server-ssh credentials
    } else if("uat" == "${env.BRANCH_NAME}") { 
      sh "echo Deploying on UAT Server"
       withCredentials([usernamePassword(credentialsId: "cropdata-ssh", passwordVariable: "password", usernameVariable: "userName")]) {
          remote.user = userName
          remote.password = password
          remote.name = "uat-server"
          remote.host = "${env.DemoServerIP}"
          CONFIG_DB_URL = "jdbc:mysql://${DemoConfigDBHostPort}/config_server_db?createDatabaseIfNotExist=true";
          sh "echo ${CONFIG_DB_URL}"
           withCredentials([string(credentialsId: "docker-reg-pwd", variable: "DockerRegPWD")]) {
            sshCommand remote: remote, command: "docker login ${DockerRegistryURL} -u maintainer -p ${DockerRegPWD}"
            sshCommand remote: remote, command: "docker stop ${AppName} || true && docker rm ${AppName} || true"
            sshCommand remote: remote, command: "docker pull ${DockerRegistryURL}/development-setup/${AppName}-${env.BRANCH_NAME}:${BUILD_NUMBER}"
            
            withCredentials([usernamePassword(credentialsId: "Config-User-Demo", passwordVariable: "password", usernameVariable: "userName")]) {
              configPassword = password
              withCredentials([usernamePassword(credentialsId: "uat-config-server-db", passwordVariable: "password", usernameVariable: "userName")]) {
                configDBPassword = password
                configDBUser = userName
                sshCommand remote: remote, command: "docker run --restart=always -d  --net cropdata-network --name ${AppName} -p 8788:8080 -e EUREKA_URI=${env.iEurekaUri} -e CONFIG_DB_URL=${CONFIG_DB_URL} -e config.dbUser=${configDBUser} -e config.dbPassword=${configDBPassword} -e config.password=${configPassword} -v /var/log/${AppName}/:/var/log/${AppName}/ -v /home/${remote.user}/docker_data/development-setup/${AppName}/:/home/ -v /etc/timezone:/etc/timezone:ro ${DockerRegistryURL}/development-setup/${AppName}-${env.BRANCH_NAME}:${BUILD_NUMBER}"
              }//with ConfigDB
            }//with Config-User
         }//with docker-reg-pwd
        }//with cropdata-ssh credentials
    }else if("demo" == "${env.BRANCH_NAME}") { 
      sh "echo Deploying on Azure DEMO Server"
      withCredentials([usernamePassword(credentialsId: "cdt-ts-mscfg-7", passwordVariable: "password", usernameVariable: "userName")]) {
          remote.user = userName
          remote.password = password
          remote.name = "azure-demo-server"
          remote.host = "${env.AzureDemo_CDT_TS_MSCFG_IP}"
          CONFIG_DB_URL = "jdbc:mysql://${AzureDemo_CONFIG_SERVER_DB_Host_Port}/config_server_db";
           withCredentials([string(credentialsId: "docker-reg-pwd", variable: "DockerRegPWD")]) {
            sshCommand remote: remote, command: "docker login ${DockerRegistryURL} -u maintainer -p ${DockerRegPWD}"
            sshCommand remote: remote, command: "docker stop ${AppName} || true && docker rm ${AppName} || true"
            sshCommand remote: remote, command: "docker pull ${DockerRegistryURL}/development-setup/${AppName}-${env.BRANCH_NAME}:${BUILD_NUMBER}"
            
            withCredentials([usernamePassword(credentialsId: "cdt-ts-config-user", passwordVariable: "password", usernameVariable: "userName")]) {
              configPassword = password
              withCredentials([usernamePassword(credentialsId: "cdt-ts-db-root", passwordVariable: "password", usernameVariable: "userName")]) {
                configDBPassword = password
                configDBUser = userName
                sshCommand remote: remote, command: "docker run --restart=always -d --name ${AppName} -p 7073:8080 -e EUREKA_URI=${env.AzureDemo_EUREKA_URI} -e CONFIG_DB_URL=${CONFIG_DB_URL} -e config.dbUser=${configDBUser} -e config.dbPassword=${configDBPassword} -e config.password=${configPassword} -v /var/log/development-setup/${AppName}/:/var/log/${AppName}/ -v /home/${remote.user}/docker_data/development-setup/${AppName}/:/home/ -v /etc/timezone:/etc/timezone:ro ${DockerRegistryURL}/development-setup/${AppName}-${env.BRANCH_NAME}:${BUILD_NUMBER}"
              }//with ConfigDB
            }//with Config-User
         }//with docker-reg-pwd
        }//with cropdata-ssh credentials
    } else if("linode" == "${env.BRANCH_NAME}") { 
      sh "echo Deploying on Internal Application Server"
       withCredentials([usernamePassword(credentialsId: "linode-credentials", passwordVariable: "password", usernameVariable: "userName")]) {
          remote.user = userName
          remote.password = password
          remote.name = "i-app-server"
          remote.host = "${env.iConfigServerHost}"
          CONFIG_DB_URL = "jdbc:mysql://${iConfigServerDbHostPort}/config_server_db?createDatabaseIfNotExist=true";
           withCredentials([string(credentialsId: "docker-reg-pwd", variable: "DockerRegPWD")]) {
            sshCommand remote: remote, command: "docker login ${DockerRegistryURL} -u maintainer -p ${DockerRegPWD}"
            sshCommand remote: remote, command: "docker stop ${AppName} || true && docker rm ${AppName} || true"
            sshCommand remote: remote, command: "docker pull ${DockerRegistryURL}/development-setup/${AppName}-${env.BRANCH_NAME}:${BUILD_NUMBER}"
            
            withCredentials([usernamePassword(credentialsId: "config-user-internal-apps", passwordVariable: "password", usernameVariable: "userName")]) {
              configPassword = password
              withCredentials([usernamePassword(credentialsId: "linode-config-server-db", passwordVariable: "password", usernameVariable: "userName")]) {
                configDBPassword = password
                configDBUser = userName
                sshCommand remote: remote, command: "docker run --restart=always -d  --net cropdata-network --name ${AppName} -p 8763:8080 -e EUREKA_URI=${env.iEurekaUri} -e CONFIG_DB_URL=${CONFIG_DB_URL} -e config.dbUser=${configDBUser} -e config.dbPassword=${configDBPassword} -e config.password=${configPassword} -v /var/log/${AppName}/:/var/log/${AppName}/ -v /home/${remote.user}/docker_data/development-setup/${AppName}/:/home/ -v /etc/timezone:/etc/timezone:ro ${DockerRegistryURL}/development-setup/${AppName}-${env.BRANCH_NAME}:${BUILD_NUMBER}"
              }//with ConfigDB
            }//with Config-User
         }//with docker-reg-pwd
        }//with cropdata-ssh credentials
    } else if("krishi-setu" == "${env.BRANCH_NAME}") { 
      sh "echo Deploying on DRK KS app Server"
       withCredentials([usernamePassword(credentialsId: "linode2-ssh-credentials", passwordVariable: "password", usernameVariable: "userName")]) {
          remote.user = userName
          remote.password = password
          remote.name = "ks-app-server"
          remote.host = "${env.DrkServerIP}"
          CONFIG_DB_URL = "jdbc:mysql://${env.DrkConfigServerDbHostPort}/config_server_db?createDatabaseIfNotExist=true";
           withCredentials([string(credentialsId: "docker-reg-pwd", variable: "DockerRegPWD")]) {
            sshCommand remote: remote, command: "docker login ${DockerRegistryURL} -u maintainer -p ${DockerRegPWD}"
            sshCommand remote: remote, command: "docker stop ${AppName} || true && docker rm ${AppName} || true"
            sshCommand remote: remote, command: "docker pull ${DockerRegistryURL}/development-setup/${AppName}-${env.BRANCH_NAME}:${BUILD_NUMBER}"
            
            withCredentials([usernamePassword(credentialsId: "Drk-Config-User", passwordVariable: "password", usernameVariable: "userName")]) {
              configPassword = password
              withCredentials([usernamePassword(credentialsId: "drk-ks-cs-db-credentials", passwordVariable: "password", usernameVariable: "userName")]) {
                configDBPassword = password
                configDBUser = userName
                sshCommand remote: remote, command: "docker run --restart=always -d  --net cropdata-network --name ${AppName} -p 8763:8080 -e EUREKA_URI=${env.DrkEurekaUri} -e CONFIG_DB_URL=${CONFIG_DB_URL} -e config.dbUser=${configDBUser} -e config.dbPassword=${configDBPassword} -e config.password=${configPassword} -v /var/log/${AppName}/:/var/log/${AppName}/ -v /home/${remote.user}/docker_data/development-setup/${AppName}/:/home/ -v /etc/timezone:/etc/timezone:ro ${DockerRegistryURL}/development-setup/${AppName}-${env.BRANCH_NAME}:${BUILD_NUMBER}"
              }//with ConfigDB
            }//with Config-User
         }//with docker-reg-pwd
        }//with cropdata-ssh credentials
    } else if("master" == "${env.BRANCH_NAME}") { 
      sh "echo Deploying on PRODUCTION Server"
    }

     sh "echo Deployment Successful"
   }
}


